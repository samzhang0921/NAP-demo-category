// Clearfix
// =============================================
@mixin clearfix() {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

// Font smoothing
// =============================================
@mixin font-smoothing($value: on) {
    @if $value==on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

// CSS vendor prefix
// =============================================
@mixin vendor-prefix($name, $argument) {
    -webkit-#{$name}: #{$argument};
    -ms-#{$name}: #{$argument};
    -moz-#{$name}: #{$argument};
    -o-#{$name}: #{$argument};
    #{$name}: #{$argument};
}

// Vertical align
// =============================================
@mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}


// Border radius
// =============================================
@mixin border-radius($radius) {
    border-radius: $radius;
    background-clip: padding-box;
}

// Generate spacing classes
// =============================================
@mixin generate-spacing-classes($default-space-amounts-with-direction: (5 left l, 10 left l, 15 left l, 25 left l, 30 left l)) {
    @each $space in $default-space-amounts-with-direction {
        .m#{nth($space, 3)}-#{nth($space, 1)} {
            margin-#{nth($space, 2)}: #{nth($space, 1)}px;
        }
    }
}

// Responsive line breaks
// =============================================
@mixin responsive-br() {
    br {
        &.m-br {
            display: none;
            @media (max-width: $screen-xs-max) {
                display: inline;
            }
        }
        &.mt-br {
            display: none;
            @media (max-width: $screen-sm-max) {
                display: inline;
            }
        }
        &.t-br {
            display: none;
            @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
                display: inline;
            }
        }
        &.td-br {
            display: none;
            @media (min-width: $screen-sm-min) {
                display: inline;
            }
        }
        &.d-br {
            display: none;
            @media (min-width: $screen-md-min) {
                display: inline;
            }
        }
    }
}

// Grid framework
// =============================================
@mixin make-grid-columns($i: 1, $list: ".xs-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .xs-#{$i}, .sm-#{$i}, .md-#{$i}, .lg-#{$i}";
    }
    #{$list} {
        position: relative;
        // Prevent columns from collapsing when empty
        min-height: 1px;
        // Inner gutter via padding
        padding-left: ceil(($grid-gutter-width / 2));
        padding-right: floor(($grid-gutter-width / 2));
    }
}

@mixin float-grid-columns($class, $i: 1, $list: ".#{$class}-#{$i}") {
    @for $i from (1 + 1) through $grid-columns {
        $list: "#{$list}, .#{$class}-#{$i}";
    }
    #{$list} {
        float: left;
    }
}

@mixin calc-grid-column($index, $class, $type) {
    @if ($type==width) and ($index > 0) {
        .#{$class}-#{$index} {
            width: percentage(($index / $grid-columns));
        }
    }
    @if ($type==push) and ($index > 0) {
        .#{$class}-push-#{$index} {
            left: percentage(($index / $grid-columns));
        }
    }
    @if ($type==push) and ($index==0) {
        .#{$class}-push-0 {
            left: auto;
        }
    }
    @if ($type==pull) and ($index > 0) {
        .#{$class}-pull-#{$index} {
            right: percentage(($index / $grid-columns));
        }
    }
    @if ($type==pull) and ($index==0) {
        .#{$class}-pull-0 {
            right: auto;
        }
    }
    @if ($type==offset) {
        .#{$class}-offset-#{$index} {
            margin-left: percentage(($index / $grid-columns));
        }
    }
}

@mixin loop-grid-columns($columns, $class, $type) {
    @for $i from 0 through $columns {
        @include calc-grid-column($i, $class, $type);
    }
}

@mixin make-grid($class) {
    @include float-grid-columns($class);
    @include loop-grid-columns($grid-columns, $class, width);
    @include loop-grid-columns($grid-columns, $class, pull);
    @include loop-grid-columns($grid-columns, $class, push);
    @include loop-grid-columns($grid-columns, $class, offset);
}

// Centered container element
@mixin container-fixed($gutter: $grid-gutter-width) {
    margin-right: auto;
    margin-left: auto;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    @include clearfix;
}

// Creates a wrapper for a series of columns
@mixin make-row($gutter: $grid-gutter-width) {
    margin-left: ceil(($gutter / -2));
    margin-right: floor(($gutter / -2));
    @include clearfix;
}

// Generate the extra small columns
@mixin make-xs-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    float: left;
    width: percentage(($columns / $grid-columns));
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
}

@mixin make-xs-column-offset($columns) {
    margin-left: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-push($columns) {
    left: percentage(($columns / $grid-columns));
}

@mixin make-xs-column-pull($columns) {
    right: percentage(($columns / $grid-columns));
}

// Generate the small columns
@mixin make-sm-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    @media (min-width: $screen-sm-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}

@mixin make-sm-column-offset($columns) {
    @media (min-width: $screen-sm-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}

@mixin make-sm-column-push($columns) {
    @media (min-width: $screen-sm-min) {
        left: percentage(($columns / $grid-columns));
    }
}

@mixin make-sm-column-pull($columns) {
    @media (min-width: $screen-sm-min) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the medium columns
@mixin make-md-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    @media (min-width: $screen-md-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}

@mixin make-md-column-offset($columns) {
    @media (min-width: $screen-md-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}

@mixin make-md-column-push($columns) {
    @media (min-width: $screen-md-min) {
        left: percentage(($columns / $grid-columns));
    }
}

@mixin make-md-column-pull($columns) {
    @media (min-width: $screen-md-min) {
        right: percentage(($columns / $grid-columns));
    }
}

// Generate the large columns
@mixin make-lg-column($columns, $gutter: $grid-gutter-width) {
    position: relative;
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
    @media (min-width: $screen-lg-min) {
        float: left;
        width: percentage(($columns / $grid-columns));
    }
}

@mixin make-lg-column-offset($columns) {
    @media (min-width: $screen-lg-min) {
        margin-left: percentage(($columns / $grid-columns));
    }
}

@mixin make-lg-column-push($columns) {
    @media (min-width: $screen-lg-min) {
        left: percentage(($columns / $grid-columns));
    }
}

@mixin make-lg-column-pull($columns) {
    @media (min-width: $screen-lg-min) {
        right: percentage(($columns / $grid-columns));
    }
}
